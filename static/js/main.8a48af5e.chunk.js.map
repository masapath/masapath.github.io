{"version":3,"sources":["components/CheckListItem.js","components/CheckboxList.js","components/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Component","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","CheckboxList","props","classes","React","useState","checked","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","List","className","ListItem","role","undefined","dense","button","onClick","ListItemText","edge","id","primary","title","ListItemIcon","Checkbox","color","tabIndex","disableRipple","inputProps","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8a48af5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nclass CheckListItem extends Component {\n  render() {\n    const { title, description } = this.props;\n\n    return (\n      <div className=\"CheckList\">\n        <div className=\"CheckListItem-title\">{title}</div>\n        <div className=\"CheckListItem-description\">{description}</div>\n        <Checkbox defaultChecked color=\"primary\" inputProps={{ 'aria-label': 'secondary checkbox' }} />\n      </div>\n    );\n  }\n}\nexport default CheckListItem;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function CheckboxList(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([]);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  return (\n    <List className={classes.root}>\n      <ListItem key={0} role={undefined} dense button onClick={handleToggle(0)}>\n        <ListItemText \n          edge=\"start\"\n          id={0} \n          primary={`${props.title} 1`}\n          />\n        <ListItemIcon>\n          <Checkbox\n            edge=\"end\"\n            color=\"primary\"\n            checked={checked.indexOf(0) !== -1}\n            tabIndex={-1}\n            disableRipple\n            inputProps={{ 'aria-labelledby': 0 }}\n          />\n        </ListItemIcon>\n      </ListItem>\n      <ListItem key={1} role={undefined} dense button onClick={handleToggle(1)}>\n        <ListItemText \n          edge=\"start\"\n          id={1} \n          primary={props.title} \n          />\n        <ListItemIcon>\n          <Checkbox\n            edge=\"end\"\n            color=\"primary\"\n            checked={checked.indexOf(1) !== -1}\n            tabIndex={-1}\n            disableRipple\n            inputProps={{ 'aria-labelledby': 1 }}\n          />\n        </ListItemIcon>\n      </ListItem>\n      <ListItem key={2} role={undefined} dense button onClick={handleToggle(2)}>\n        <ListItemText \n          edge=\"start\"\n          id={2} \n          primary={props.title} \n          />\n        <ListItemIcon>\n          <Checkbox\n            edge=\"end\"\n            color=\"primary\"\n            checked={checked.indexOf(2) !== -1}\n            tabIndex={-1}\n            disableRipple\n            inputProps={{ 'aria-labelledby': 2 }}\n          />\n        </ListItemIcon>\n      </ListItem>\n    </List>\n  );\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport CheckListItem from \"./CheckListItem\";\nimport CheckboxList from \"./CheckboxList\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <h1>点呼アプリ</h1>\n          <div>\n            <CheckboxList title=\"点検項目\"/>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport purple from '@material-ui/core/colors/purple';\n\n// const theme = createMuiTheme({\n//   palette: {\n//     primary: purple,\n//   },\n//   status: {\n//     danger: 'orange',\n//   },\n// });\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider \n    // theme={theme}\n    >\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}